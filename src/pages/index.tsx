import Link from "next/link";

import styles from "../styles/page.module.css";
import TopicCard from "@/components/topicCard/TopicCard";
import Head from "next/head";
import { trpc } from "@/utils/trpc";
import { useState } from "react";
import { z } from "zod";
import { Topics } from "@/schemas/topicSchema";

type Topic = z.infer<typeof Topics.element>;

type VotedCombination = {
  topic1: Topic;
  topic2: Topic;
};

function pickTwo(
  topics: Topic[],
  votedCombinations: VotedCombination[]
): { left: Topic; right: Topic } {
  const index1 = Math.floor(Math.random() * topics.length);
  let index2 = Math.floor(Math.random() * topics.length);

  while (
    index2 === index1 ||
    votedCombinations.some((combination) => {
      return (
        (combination.topic1 === topics[index1] &&
          combination.topic2 === topics[index2]) ||
        (combination.topic1 === topics[index2] &&
          combination.topic2 === topics[index1])
      );
    })
  ) {
    index2 = Math.floor(Math.random() * topics.length);
  }

  const topic1 = topics[index1];
  const topic2 = topics[index2];
  return { left: topic1, right: topic2 };
}

function HomeContent({ topics }: { topics: Topic[] }) {
  const [votedCombinations, setVotedCombinations] = useState<
    VotedCombination[]
  >([]);

  function handleVote(t1: Topic, t2: Topic) {
    setVotedCombinations((prev) => [...prev, { topic1: t1, topic2: t2 }]);
  }

  if (topics && topics.length >= 2) {
    let chosenTopics = pickTwo(topics, votedCombinations);
    return (
      <>
        <TopicCard
          side={"left"}
          topic={chosenTopics.left}
          onClick={() => handleVote(chosenTopics.left, chosenTopics.right)}
        />
        <span>vs.</span>
        <TopicCard
          side={"right"}
          topic={chosenTopics.right}
          onClick={() => handleVote(chosenTopics.left, chosenTopics.right)}
        />
      </>
    );
  }

  return <span>Not enough topics pitched yet.</span>;
}

export default function Home() {
  const { data, status } = trpc.getTopics.useQuery(undefined, {
    refetchOnMount: false,
    refetchOnWindowFocus: false,
    refetchOnReconnect: false,
    staleTime: Infinity,
  });

  return (
    <>
      <Head>
        <title>GFT Ballot</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <section className={styles.votingarea}>
          <Link href={"/pitch"} className={styles.cta}>
            Pitch your own
          </Link>
          {status === "success" ? (
            data.map((topic) => (
              <TopicCard
                key={topic.title}
                side={"left"}
                topic={topic}
                onClick={() => {}}
              />
            ))
          ) : (
            <span>Please wait while loading data...</span>
          )}
        </section>
      </main>
    </>
  );
}
